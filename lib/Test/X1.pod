=head1 NAME

Test::X1 - A lightweight test manager

=head1 SYNOPSIS

  use Test::X1;
  use Test::More;
  
  test {
      my $c = shift;
      ok 1;
      ok 2;
      $c->done;
  };
  
  test {
      my $c = shift;
      my $timer; $timer = AnyEvent->timer(
          after => 2,
          cb => sub {
              test {
                  ok 2;
                  is 3, 0;
                  undef $timer;
                  $c->done;
              } $c;
          },
      );
      ok 1;
  } n => 3, name => ['anyevent', 'callback'];
  
  run_tests;

  ok 1 - (1).1
  ok 2 - (1).2
  ok 3 - anyevent.callback (2).1
  ok 4 - anyevent.callback (2).2
  not ok 5 - anyevent.callback (2).3
  #   Failed test 'anyevent.callback (2).3'
  #   at lib/Test/X1.pod line 24.
  #          got: '3'
  #     expected: '0'
  # anyevent.callback (2): 1 test failed
  1..5
  # Looks like you failed 1 test of 5.

=head1 DESCRIPTION

The C<Test::X1> module defines a simple, lightweight test management
framework for L<Test::Builder>-based tests.  It supports automatic
naming of tests, partial execution, concurrent execution, and other
useful features.

=head1 USAGE

By C<use>ing the C<Test::X1> module, functions for defining and
running tests are exported to the caller package.  Note that it only
exports test management functions.  You have to import or define your
favorite test assertion sets such as L<Test::More> or
L<Test::Differences> by yourself.  The C<Test::X1> test framework only
assumes that you are writing L<Test::Builder>-based test script; As
long as test assertion functions are build upon L<Test::Builder>'s
framework, you can select any random test module.

=head2 Tests

A C<Test::X1>-based test script consists of one or more tests.  A
I<test> is a group of I<subtests>, which are L<Test::Builder>-based
assertion functions such as I<is> and I<ok>.  A test can be defined by
enclosing subtests and related codes by the C<test> function:

  test {
      my $c = shift;
      
      is 2 * 4, 8;
      is 40 - 30, 10;
      
      $c->done;
  };

This usage of the C<test> function is sometimes referred to as I<test
definition>.  The code block in the test definition is invoked with an
argument, the context object for the test, I<$c>.  The C<< $c->done >>
method has to be called when all subtests in the test are done.  (See
L</"Context objects"> for more information on I<$c>.)

You can specify the number of subtests in a test by specifying the
C<n> option to the test definition.  If the C<n> option is specified,
it is verified that the expected number of subtests are done before
the C<< $c->done >> metohd is invoked.  It is considered as good
practice to specify the number of subtests, especially when there are
loops in the test, such that it can be confirmed that all expected
subtests are really executed.  Since the number of subtests can be
frequently changed in some cases, or it could even be unknown a
priori, the C<n> option is not required.

The test can be named by specifying the C<name> option to the test
definition.  If the option is specified, the name of the test is the
C<name> value, followed by C< (>, the sequential number of the test,
then C<)> (e.g. C<hoge (1)>).  Otherwise, i.e. if the option is not
specified, the name of the test is C<(> followed by the sequential
number of the test, then C<)> (e.g. C<(2)>).

The name of the test is used to construct the name of the subtests in
the test.

The C<TEST_METHOD> environment variable can be used to specify the
regular expression used to filter the tests to run by their names.  If
the environment variable is not set, all tests are executed.
Otherwise, only the tests whose name matches the pattern are executed.

See also L</Naming> for how names are handled and used by the module.

For example, consider the following test script:

  # t/foo.t
  use Test::X1;
  use Test::More;
  
  my $x = 10;
  
  test {
      my $c = shift;
      is $x, 10;
      $c->done;
  } name => 'abc2';
  
  test {
      my $c = shift;
      is $x * 2, 20;
      $c->done;
  };
  
  run_tests;

The first test is named as C<abc2 (1)>, while the second test is named
as C<(2)>.  If the script is executed with no C<TEST_METHOD>, both of
them are executed.  If the script is executed with C<TEST_METHOD=abc>,
only the first test is executed.  If the script is executed with
C<TEST_METHOD=2>, both of them are executed.

=head2 Context objects

The code block in the test definition is invoked with an argument,
i.e. the context object, in the C<@_> array.  The context object
provides several utility methods for the test and is created
specifically for the test.  In other word, different context objects
are created for different test definitions.  In this document, the
context object is sometimes referred to as C<$c>.

The most significant method of the test context object is the C<done>
method.  The C<< $c->done >> method must be invoked when and only when
all the subtests in the test has been done, successfully or not.  Once
the method has been invoked, no subtest can be performed in the test.
If the method is not invoked in the test, an error would be reported.

The most basic usage would be invoking the C<< $c->done >> method just
before the end of the test code:

  test {
      my $c = shift;
      
      ... tests ...
      
      $c->done;
  } $c;

If there are callbacks, the C<< $c->done >> method should be invoked
at the end of the last callback:

  test {
      my $c = shift;
      my $timer = AE::timer 10, 0, sub {
          test {
              ...;
              $c->done;
          } $c;
      };
  } $c;

(The inner C<test> statement is a test block; See L</"Test blocks">
for details.)

More complex example:

  test {
      my $c = shift;
      
      my $cv = AE::cv;
      
      # This callback will be executed after all of
      # following callbacks are invoked.
      $cv->begin (sub { test { $c->done } $c });
      
      $cv->begin;
      my $timer1 = AE::timer 10, 0, sub { $cv->end };
      
      $cv->begin;
      my $timer2 = AE::timer 4, 0, sub { $cv->end };
      
      ...
      
      $cv->end;
  } $c;

Application test framework built on top of the module might define
additional methods to context objects.  See C</"Subclassing"> on the
guideline for extending the context object interface.

=head2 Test blocks

Another usage of the C<test> function is defining a B<test block>.
They are different from the test definitions in that they are used
within some test definition and takes the test context object I<$c> as
the first argument.

Test blocks are typically used within callback functions in a test; in
fact there has to be a test block within an asynchronously invoked
callback function:

  test {
      my $c = shift;
      AE::io *STDIN, 0, sub {
          test {
              is scalar <STDIN>, "hoge";
              $c->done;
          } $c;
      };
  };

A test block gives the test context as encapsulated by I<$c> to the
subtests within the block.  You have to enclose subtests within
callback functions by yourself, unfortunately, otherwise the test
manager losts the association of subtests and their "parent" test, due
to the asynchronousness of the invocation of the callback.

Test block can be named by the C<name> option:

  test {
      test {
          ok 1, 'Test X';
      } $c, name => 'hoge';
  };
  
  # ok 1 - (1).hoge.1 Test X

The C<TEST_BLOCK_SKIP> environment variable can be used to specify the
regular expression to skip the test blocks with names matching to the
pattern.  For example, C<TEST_BLOCK_SKIP=og.$> would prevent the C<ok>
statement in the example above from executed.  See also C</Naming>.

=head2 Naming

Tests, test blocks, and subtests can be named.  Instead of a scalar
value, representing the literal string, an array reference containing
string components can be specified.

  test {
      my $c = shift;
      test {
          is $hoge, $fuga, 'Subtest 1';
      } $c, name => 'Test block 1';
      $c->done;
  } name => 'Test 1';

  test {
      my $c = shift;
      test {
          is $hoge, $fuga, ['Subtest', 2];
      } $c, name => ['Test block', 2];
      $c->done;
  } name => ['Test', 2];

Naming by array reference would be particularly useful when defining
multiple tests by iteration:

  for my $value (1, 2, 30, 120) {
      test {
          my $c = shift;
          like $c, qr{^\d+$};
          $c->done;
      } name => ['Test', $value];
  }

If the name is represented as an array reference, its items are joined
by C<.> (period) before actually used to output results, or filter
tests by environment variables, i.e. C<TEST_METHOD> and
C<TEST_BLOCK_SKIP>.  Any empty string is replaced by C<(empty)> and
any C<undef> value is replaced by C<(undef)>.

=head2 Waiting for a condvar

An L<AnyEvent> condvar can be specified as the C<wait> parameter to a
test definition (I<not> test block!) to wait for the condvar to
receive a value.  The received value can be accessed from the C<<
$c->received_data >> method of the context object.

  my $cv = AE::cv;
  test {
      my $c = shift;
      is $c->received_data, 123;
      $c->done;
  } wait => $cv;

The default C<wait> value, used when no C<wait> parameter is
explicitly specified to test definitions, can be provided by
subclassing (see L</"Subclassing"> for details) and defining C<<
$manager->default_test_wait_cv >> method returning a condvar (or
C<undef>) in the test manager subclass.  In this case, by explicitly
setting C<undef> value for the C<wait> parameter of test definitions,
this default can be cleared.  (See C<t/cv-wait-default.t> test script
for examples.)

=head2 Concurrent execution of tests

Thanks to L<AnyEvent> framework, tests (as defined by outermost C<test
{}> blocks) can be concurrenrly executed when they are written in
non-blocking way using L<AnyEvent>.

Consider the following test script fragment:

  test {
      my $c = shift;
      ok 'Subtest #1.1';
      AnyEvent::Example->something(cb => sub {
          test {
              is $_[0], 'hoge', 'Subtest #1.2';
              $c->done;
          } $c;
      });
  };
  
  test {
      my $c = shift;
      ok 'Subtest #2.1';
      AnyEvent::Example->something(cb => sub {
          test {
              is $_[0], 'hoge', 'Subtest #2.2';
              $c->done;
          } $c;
      });
  };
  
  run_tests;

In this case, Subtest #2.1 is always executed after Subtest #1.1 is
run, as C<Test::X1>'s C<run_tests> executes tests in the same order as
they are defined.  However, execution order of Subtests #1.2 and #2.2
is unclear at all, depending on how long C<<
AnyEvent::Example->something >> defers the execution of the callbacks.

Anyway, we can describe this situation that multiple tests are
concurrently executed.  By default, at most five tests are
concurrently executed by C<Test::X1>.  Setting a number to the
C<TEST_MAX_CONCUR> environment variable can override this default, if
desired.  C<TEST_MAX_CONCUR=1> disables this concurrency, which will
be useful for debugging purposes in particular.

=head2 Subclassing

XXX

=head1 TEST MANAGER OBJECT

XXX

The test manager object is singleton; there is at most one test
manager object at one time.

The C<Text::X1> class (and its subclasses) exports C<get_test_manager>
function, which takes no argument, returning the current test manager
object.

=over 4

=item $cv = $manager->default_test_wait_cv

This method can be overridden by subclasses, if desired.  This method
is expected to return an L<AnyEvent> condvar or C<undef>.  The value
returned by this method is used as the C<wait> parameter value of test
definitions, when it is not explicitly specified.

=item $manager->stop_test_manager

This method can be overridden by subclasses, if desired.  This method
is invoked before the test manager object is destructed.  It is
expected to be used to close anything opened by the test manager, if
necessary.  This method can be invoked more than once for an test
manager object.  The C<Test::X1> module does it's best effort to
invoke the method for the test manager object before Perl goes into
the global destruction phase.

=back

=head1 CONTEXT OBJECT

XXX

=over 4

=item $data = $c->received_data

Return the data received from the L<AnyEvent> condvar specified to the
C<wait> parameter of the test definition for the current test.  See
also L</"Waiting for a condvar">.

=back

=head1 DEPENDENCY

This module requires Perl 5.8 or later.  In addition to core modules,
this module depends on L<Exporter::Lite> and L<AnyEvent>.

=head1 DEVELOPMENT

Latest version of this module is available in the GitHub repository:
<https://github.com/wakaba/perl-test-x1>.

Tests are automatically run by Travis CI
<http://travis-ci.org/wakaba/perl-test-x1>.

=head1 AUTHOR

Wakaba (id:wakabatan) <wakabatan@hatena.ne.jp>.

=head1 ACKNOWLEDGEMENTS

This module is inspired by following modules: C<Test::Builder>,
C<Test::Class>, C<Test::More>.

=head1 LICENSE

Copyright 2012 Hatena <http://www.hatena.ne.jp/>.

Copyright 2012 Wakaba <w@suika.fam.cx>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
