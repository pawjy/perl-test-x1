=head1 NAME

Test::X1 - A test manager

=head1 SYNOPSIS

  use Test::X1;
  use Test::More;
  
  test {
      my $c = shift;
      ok 1;
      ok 2;
      $c->done;
  };
  
  test {
      my $c = shift;
      my $timer; $timer = AnyEvent->timer(
          after => 2,
          cb => sub {
              test {
                  ok 2;
                  is 3, 0;
                  undef $timer;
                  $c->done;
              } $c;
          },
      );
      ok 1;
  } n => 3, name => ['anyevent', 'callback'];
  
  run_tests;
  
  # ok 1 - (1).1
  # ok 2 - (1).2
  # ok 3 - anyevent.callback (2).1
  # ok 4 - anyevent.callback (2).2
  not ok 5 - anyevent.callback (2).3
  #   Failed test 'anyevent.callback (2).3'
  #   at lib/Test/X1.pod line 24.
  #          got: '3'
  #     expected: '0'
  # anyevent.callback (2): 1 test failed
  1..5
  # Looks like you failed 1 test of 5.

=head1 DESCRIPTION

XXX

=head1 USAGE

XXX

=head2 Tests

The C<test> function is sometimes referred to as I<test definition>.

XXX

The C<TEST_METHOD> environment variable can be used to specify the
regular expression used to filter the tests to run by their names.  If
the environment variable is not set, all tests are run.  Otherwise,
only the tests matching the pattern are run.  Please note that the
test name used to match is the string returned by C<< $c->test_name
>>, i.e. the C<name> option, if specified, followed by C< (>,
sequential test number, and C<)> (i.e. C<hoge (2)> or C<(1)>).

=head2 Context objects

XXX

The C<< $c->done >> method must be invoked when and only when all the
subtests belong to the test has been done.  Once the method has been
invoked, no subtest can be performed in the test.  If the method is
not invoked in the test, an error would be reported.

=head2 Test blocks

XXX

Test block can be named by the C<name> option:

  test {
    test {
      ok 1, 'Test X';
    } $c, name => 'hoge';
  };
  
  # ok 1 - (1).hoge.1 Test X

The C<TEST_BLOCK_SKIP> environment variable can be used to specify the
regular expression to skip the test blocks with names matching to the
pattern.  For example, C<TEST_BLOCK_SKIP=ho.*> would precent the C<ok>
statement in the example above from executed.

=head2 Waiting for a condvar

An L<AnyEvent> condvar can be specified as the C<wait> parameter to a
test definition (I<not> test block!) to wait for the condvar to
receive a value.  The received value can be accessed from the C<<
$c->received_data >> method of the context object.

  my $cv = AE::cv;
  test {
      my $c = shift;
      is $c->received_data, 123;
      $c->done;
  } wait => $cv;

The default C<wait> value, used when no C<wait> parameter is
explicitly specified to test definitions, can be provided by
subclassing (see L</"Subclassing"> for details) and defining C<<
$manager->default_test_wait_cv >> method returning a condvar (or
C<undef>) in the test manager subclass.  In this case, by explicitly
setting C<undef> value for the C<wait> parameter of test definitions,
this default can be cleared.  (See C<t/cv-wait-default.t> test script
for examples.)

=head2 Subclassing

XXX

=head1 TEST MANAGER OBJECT

XXX

The test manager object is singleton; there is at most one test
manager object at one time.

The C<Text::X1> class (and its subclasses) exports C<get_test_manager>
function, which takes no argument, returning the current test manager
object.

=over 4

=item $cv = $manager->default_test_wait_cv

This method can be overridden by subclasses, if desired.  This method
is expected to return an L<AnyEvent> condvar or C<undef>.  The value
returned by this method is used as the C<wait> parameter value of test
definitions, when it is not explicitly specified.

=back

=head1 CONTEXT OBJECT

XXX

=over 4

=item $data = $c->received_data

Return the data received from the L<AnyEvent> condvar specified to the
C<wait> parameter of the test definition for the current test.  See
also L</"Waiting for a condvar">.

=back

=head1 AUTHOR

Wakaba <wakabatan@hatena.ne.jp>.

=head1 LICENSE

Copyright 2012 Hatena <http://www.hatena.ne.jp/>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
